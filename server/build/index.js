/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! socket.io */ \"socket.io\");\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(socket_io__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var body_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! body-parser */ \"body-parser\");\n/* harmony import */ var body_parser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(body_parser__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _room_room__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./room/room */ \"./src/room/room.ts\");\n\n\n\n\n\n\n\nconst app = express__WEBPACK_IMPORTED_MODULE_0__();\napp.use(body_parser__WEBPACK_IMPORTED_MODULE_2__[\"urlencoded\"]({ extended: false }));\napp.use(body_parser__WEBPACK_IMPORTED_MODULE_2__[\"json\"]());\nconst ENV_DEVELOPMENT = \"development\" === \"development\";\nconsole.log(ENV_DEVELOPMENT ? \"DEVELOPMENT ENVIRONMENT\" : \"PRODUCTION ENVIRONMENT\");\nconst http = new http__WEBPACK_IMPORTED_MODULE_3__[\"Server\"](app);\nconst https = new https__WEBPACK_IMPORTED_MODULE_4__[\"Server\"](app);\nconst io = (() => {\n    return socket_io__WEBPACK_IMPORTED_MODULE_1__(ENV_DEVELOPMENT ? http : https, { path: \"/ws\" });\n})();\nconst roomId = \"/ao\";\n// const defaultRoom = Room(roomId, \"Always open\", io.of(roomId));\n// defaultRoom.subscribeEvent(\"room_empty\", () => {\n// \tdefaultRoom.reset();\n// });\nconst matches = {\n// [roomId]: defaultRoom,\n};\n//routes\napp.use((req, res, next) => {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    next();\n});\napp.get(\"/api/rooms\", function (req, res) {\n    res.status(200).send(Object.keys(io.nsps)\n        .filter((id) => matches[id])\n        .map((id) => {\n        return {\n            id,\n            name: matches[id].name,\n            players: Object.keys(io.nsps[id].connected).length,\n        };\n    }));\n});\napp.post(\"/api/rooms\", (req, res) => {\n    const name = req.body.name;\n    if (name && name.length > 5) {\n        const id = \"/\" + Object(uuid__WEBPACK_IMPORTED_MODULE_5__[\"v4\"])();\n        matches[id] = Object(_room_room__WEBPACK_IMPORTED_MODULE_6__[\"Room\"])(id, name, io.of(id));\n        matches[id].subscribeEvent(\"room_empty\", () => {\n            delete matches[id];\n        });\n        res.status(201).send({\n            id,\n            name,\n        });\n        return;\n    }\n    res.status(500).send({\n        error: \"Name min length 6\",\n    });\n});\nhttp.listen(8081, function () {\n    console.log(\"started on port 8081\");\n    process.on(\"SIGINT\", closeApp);\n    process.on(\"SIGTERM\", closeApp);\n});\nfunction closeApp() {\n    process.exit(0);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (app);\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/math.ts":
/*!*********************!*\
  !*** ./src/math.ts ***!
  \*********************/
/*! exports provided: Size, Vector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Size\", function() { return Size; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vector\", function() { return Vector; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\n\nclass Size {\n    constructor(xMin, yMin, xMax, yMax) {\n        this.min = new Vector(xMin, yMin);\n        this.max = new Vector(xMax, yMax);\n        this.center = this._getCenter();\n        this.width = this._getWidth();\n        this.height = this._getHeight();\n    }\n    static fromMatter(v) {\n        return new Size(v.min.x, v.min.y, v.max.x, v.max.y);\n    }\n    _getCenter() {\n        return new Vector((this.max.x - this.min.x) / 2 + this.min.x, (this.max.y - this.min.y) / 2 + this.min.y);\n    }\n    _getWidth() {\n        return this.max.x - this.min.x;\n    }\n    _getHeight() {\n        return this.max.y - this.min.y;\n    }\n    multiply(n) {\n        return new Size(this.min.x * n, this.min.y * n, this.max.x * n, this.max.y * n);\n    }\n}\nclass Vector {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    static fromMatter(v) {\n        return new Vector(v.x, v.y);\n    }\n    module() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n    director() {\n        return new Vector(this.x !== 0 ? this.x / Math.abs(this.x) : 0, this.y !== 0 ? this.y / Math.abs(this.y) : 0);\n    }\n    normalize() {\n        const module = this.module();\n        if (module > 0)\n            return new Vector(this.x / module, this.y / module);\n        return this;\n    }\n    copy() {\n        return new Vector(this.x, this.y);\n    }\n    setX(x) {\n        return new Vector(x, this.y);\n    }\n    setY(y) {\n        return new Vector(this.x, y);\n    }\n    invert() {\n        return this.multiply(-1);\n    }\n    multiply(n) {\n        return new Vector(this.x * n, this.y * n);\n    }\n    rotate(angle) {\n        return new Vector(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) - this.y * Math.cos(angle));\n    }\n    add(v) {\n        return new Vector(this.x + v.x, this.y + v.y);\n    }\n    substract(v) {\n        return new Vector(this.x - v.x, this.y - v.y);\n    }\n    dot(v) {\n        return this.x * v.x + this.y * v.y;\n    }\n    angle(v = null) {\n        if (!v) {\n            if (this.x === 0 && this.y > 0)\n                return Math.PI / 2;\n            if (this.x === 0 && this.y < 0)\n                return -Math.PI / 2;\n            return Math.atan(this.y / this.x) - (this.x < 0 ? Math.PI : 0);\n        }\n        return Math.acos(this.dot(v) / (this.module() * v.module()));\n    }\n    toArray() {\n        return [this.x, this.y];\n    }\n    round() {\n        return new Vector(Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"round\"])(this.x), Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"round\"])(this.y));\n    }\n    isEqual(v) {\n        return this.x === v.x && this.y === v.y;\n    }\n    serialize() {\n        return {\n            x: this.x,\n            y: this.y,\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./src/math.ts?");

/***/ }),

/***/ "./src/room/game.ts":
/*!**************************!*\
  !*** ./src/room/game.ts ***!
  \**************************/
/*! exports provided: mapSize, startPosition, Game */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapSize\", function() { return mapSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startPosition\", function() { return startPosition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Game\", function() { return Game; });\n/* harmony import */ var matter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! matter-js */ \"matter-js\");\n/* harmony import */ var matter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(matter_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./src/math.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n\n\n\nconst mapSize = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Size\"](0, 0, 3000, 6000);\nconst startPosition = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](200, 200);\nconst timeConstant = 20;\nvar DECKS;\n(function (DECKS) {\n    DECKS[DECKS[\"NAVIGATION\"] = 0] = \"NAVIGATION\";\n    DECKS[DECKS[\"CANNONLEFT\"] = 1] = \"CANNONLEFT\";\n    DECKS[DECKS[\"CANNONRIGHT\"] = 2] = \"CANNONRIGHT\";\n    DECKS[DECKS[\"LIGHTS\"] = 3] = \"LIGHTS\";\n    DECKS[DECKS[\"TORPEDO\"] = 4] = \"TORPEDO\";\n    DECKS[DECKS[\"ENGINEERING\"] = 5] = \"ENGINEERING\";\n})(DECKS || (DECKS = {}));\nvar CollisionCategories;\n(function (CollisionCategories) {\n    CollisionCategories[CollisionCategories[\"WALL\"] = 1] = \"WALL\";\n    CollisionCategories[CollisionCategories[\"SHIP\"] = 2] = \"SHIP\";\n    CollisionCategories[CollisionCategories[\"FISH\"] = 4] = \"FISH\";\n    CollisionCategories[CollisionCategories[\"PROJECTILE\"] = 8] = \"PROJECTILE\";\n    CollisionCategories[CollisionCategories[\"TORPEDO\"] = 16] = \"TORPEDO\";\n    CollisionCategories[CollisionCategories[\"BAD_FISH\"] = 32] = \"BAD_FISH\";\n})(CollisionCategories || (CollisionCategories = {}));\nconst walls = [\n    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].rectangle(mapSize.width / 2, -25, mapSize.width, 50, {\n        isStatic: true,\n        collisionFilter: {\n            category: CollisionCategories.WALL,\n        },\n    }),\n    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].rectangle(-25, mapSize.height / 2, 50, mapSize.height, {\n        isStatic: true,\n        collisionFilter: {\n            category: CollisionCategories.WALL,\n        },\n    }),\n    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].rectangle(mapSize.width + 25, mapSize.height / 2, 50, mapSize.height, {\n        isStatic: true,\n        collisionFilter: {\n            category: CollisionCategories.WALL,\n        },\n    }),\n    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].rectangle(mapSize.width / 2, mapSize.height + 25, mapSize.width, 50, {\n        isStatic: true,\n        collisionFilter: {\n            category: CollisionCategories.WALL,\n        },\n    }),\n];\nconst levelWalls = [\n    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].rectangle(mapSize.width / 2, 1050 + 25, mapSize.width, 50, {\n        isStatic: true,\n        collisionFilter: {\n            category: CollisionCategories.WALL,\n        },\n    }),\n    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].rectangle(mapSize.width / 2, 3600 + 25, mapSize.width, 50, {\n        isStatic: true,\n        collisionFilter: {\n            category: CollisionCategories.WALL,\n        },\n    }),\n];\nconst badGuys = [\"BadGuy1\", \"BadGuy2\"];\nconst fishTypes = [\n    \"GiantSquid\",\n    \"SnipeEel\",\n    \"Nautilus\",\n    \"VampireSquid\",\n    \"Hagfish\",\n    \"GulperEel\",\n    \"DragonFish\",\n    \"GiantIsopod\",\n    \"SixgillShark\",\n    \"AnglerFish\",\n    \"Fangtooth\",\n    \"GiantTubeWorm\",\n];\nconst fishByLevel = [\n    fishTypes.slice(0, 4),\n    fishTypes.slice(4, 8),\n    fishTypes.slice(8),\n];\nfunction getRandomBadGuy(level) {\n    const size = Math.random() * 40 + 40;\n    const x = Math.random() * mapSize.width;\n    const y = Math.random() * [800, 1200, 2000][level] + [100, 1800, 4000][level];\n    const index = Math.round(Math.random() * (badGuys.length - 1));\n    const type = badGuys[index];\n    const fish = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(x, y, size, {\n        mass: 0,\n        collisionFilter: {\n            category: CollisionCategories.FISH,\n        },\n        frictionAir: 0.1,\n        inertia: Infinity,\n        plugin: {\n            type,\n            isMonster: true,\n            canDoDamage: true,\n        },\n    });\n    let direction = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](Math.random() - 0.5, Math.random() - 0.5).normalize();\n    return {\n        id: 0,\n        type,\n        body: fish,\n        mounted: false,\n        killed: false,\n        invertDirection: () => {\n            direction = direction.invert();\n        },\n        isTargetted: (sensor, minRadius, maxRadius) => {\n            const d = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"distance\"])(fish.position, sensor);\n            return d >= minRadius && d <= maxRadius;\n        },\n        updater: () => {\n            if (Math.random() > 0.9) {\n                if (Math.random() > 0.98) {\n                    direction = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](Math.random() - 0.5, Math.random() - 0.5).normalize();\n                }\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setPosition(fish, _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"].fromMatter(fish.position).add(direction.multiply(20)));\n                // Body.applyForce(fish, fish.position, direction);\n            }\n        },\n    };\n}\nfunction getRandomFish(level) {\n    const size = Math.random() * 40 + 40;\n    const x = Math.random() * mapSize.width;\n    const y = Math.random() * [800, 1200, 2000][level] + [100, 1800, 4000][level];\n    const index = Math.round(Math.random() * (fishByLevel[level].length - 1));\n    const type = fishByLevel[level][index];\n    const fish = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(x, y, size, {\n        mass: 0,\n        collisionFilter: {\n            category: CollisionCategories.FISH,\n        },\n        frictionAir: 0.1,\n        inertia: Infinity,\n        plugin: {\n            type,\n            isMonster: true,\n            canDoDamage: false,\n        },\n    });\n    let direction = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](Math.random() - 0.5, Math.random() - 0.5).normalize();\n    return {\n        id: 0,\n        type,\n        body: fish,\n        mounted: false,\n        killed: false,\n        invertDirection: () => {\n            direction = direction.invert();\n        },\n        isTargetted: (sensor, minRadius, maxRadius) => {\n            const d = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"distance\"])(fish.position, sensor);\n            return d >= minRadius && d <= maxRadius;\n        },\n        updater: () => {\n            if (Math.random() > 0.9) {\n                if (Math.random() > 0.98) {\n                    direction = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](Math.random() - 0.5, Math.random() - 0.5).normalize();\n                }\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setPosition(fish, _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"].fromMatter(fish.position).add(direction.multiply(20)));\n                // Body.applyForce(fish, fish.position, direction);\n            }\n        },\n    };\n}\nfunction getRandomObjectives(fishes) {\n    const availableTypes = fishes\n        .map((fish) => fish.type)\n        .filter((x) => !badGuys.includes(x));\n    const types = [];\n    while (types.length < 3) {\n        const type = Math.round(Math.random() * (availableTypes.length - 1));\n        if (!types.includes(availableTypes[type]))\n            types.push(availableTypes[type]);\n    }\n    return types.map((type) => ({\n        type,\n        amount: 1,\n        done: false,\n    }));\n}\nfunction Game() {\n    const engine = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Engine\"].create();\n    const world = engine.world;\n    world.bounds = mapSize;\n    world.gravity.x = 0;\n    world.gravity.y = 0;\n    let interval;\n    let level = 0;\n    const eventSubscribers = {};\n    let seconds = 0;\n    let startTime = null;\n    let fishCount = 1;\n    let effectCount = 1;\n    let rewards = [];\n    let objectives = [];\n    let effects = [];\n    let players = {};\n    const ship = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].fromVertices(startPosition.x, startPosition.y, [\n        [\n            { x: 137.07001, y: 128.46212 },\n            { x: 167.14866999999998, y: 111.25346 },\n            { x: 171.25465999999997, y: 95.28572 },\n            { x: 210.94590999999997, y: 93.46084 },\n            { x: 227.36986999999996, y: 67.45623 },\n            { x: 258.84912999999995, y: 67.00001 },\n            { x: 256.11179999999996, y: 94.8295 },\n            { x: 316.78921999999994, y: 107.14747 },\n            { x: 334.12562999999994, y: 115.35945 },\n            { x: 335.07000999999997, y: 131.65567 },\n            { x: 316.78921999999994, y: 138.62672999999998 },\n            { x: 298.08414999999997, y: 149.11981999999998 },\n            { x: 297.17170999999996, y: 154.59446999999997 },\n            { x: 271.62332, y: 163.71889 },\n            { x: 271.1671, y: 180.59906999999998 },\n            { x: 214.13945, y: 181.05528999999999 },\n            { x: 213.25895, y: 155.37915999999998 },\n            { x: 169.00549, y: 156.2916 },\n            { x: 137.07001000000002, y: 128.46211 },\n            { x: 137.07001, y: 128.46212 },\n        ],\n    ], {\n        collisionFilter: {\n            category: CollisionCategories.SHIP,\n        },\n        mass: 10,\n        frictionAir: 0.1,\n        inertia: Infinity,\n        plugin: {\n            isShip: true,\n        },\n    });\n    const shipState = {\n        leftCannon: {\n            on: true,\n            angle: 0,\n            power: 100,\n        },\n        rightCannon: {\n            on: true,\n            angle: 0,\n            power: 100,\n        },\n        lights: {\n            on: true,\n            angle: 0,\n            length: 100,\n            power: 100,\n        },\n        torpedos: {\n            on: false,\n            power: 100,\n            amount: 3,\n            cooldown: 0,\n            targetting: false,\n        },\n        health: 100,\n    };\n    let fishes = [];\n    function subscribeEvent(eventName, callback) {\n        if (!eventSubscribers[eventName]) {\n            eventSubscribers[eventName] = [callback];\n        }\n        else {\n            eventSubscribers[eventName].push(callback);\n        }\n    }\n    function triggerEvent(eventName, ...args) {\n        if (eventSubscribers[eventName]) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            eventSubscribers[eventName].forEach((cb) => cb(...args));\n        }\n    }\n    function getAvailableDeck() {\n        const usedDecks = Object.values(players).map((v) => v.deck);\n        const availableDecks = [0, 1, 2, 3, 4].filter((deck) => !usedDecks.includes(deck));\n        return availableDecks[0];\n    }\n    function addPlayer(id, name) {\n        players[id] = {\n            id,\n            name,\n            deck: getAvailableDeck(),\n            dx: 0,\n            dy: 0,\n            isAdmin: Object.values(players).length === 0,\n        };\n    }\n    function getPlayer(id) {\n        return players[id];\n    }\n    function getPlayers() {\n        return players;\n    }\n    function redistributePower() {\n        let redistributablePower = 0;\n        const leftCannon = shipState.leftCannon.on;\n        const rightCannon = shipState.rightCannon.on;\n        const lights = shipState.lights.on;\n        const torpedos = shipState.torpedos.on;\n        if (!leftCannon)\n            redistributablePower += 100;\n        if (!rightCannon)\n            redistributablePower += 100;\n        if (!lights)\n            redistributablePower += 100;\n        if (!torpedos)\n            redistributablePower += 100;\n        const systemsOn = [leftCannon, rightCannon, lights, torpedos].filter((x) => x).length;\n        const equity = redistributablePower / (systemsOn || 1);\n        if (leftCannon)\n            shipState.leftCannon.power = 100 + equity;\n        if (rightCannon)\n            shipState.rightCannon.power = 100 + equity;\n        if (lights)\n            shipState.lights.power = 100 + equity;\n        if (torpedos)\n            shipState.torpedos.power = 100 + equity;\n    }\n    function playerKeyDown(id, code) {\n        console.log(\"KEYDOWN\", id, code);\n        const player = getPlayer(id);\n        switch (player.deck) {\n            case DECKS.CANNONLEFT:\n                if (code === \"SPACE\")\n                    fireLeftCannon();\n                break;\n            case DECKS.CANNONRIGHT:\n                if (code === \"SPACE\")\n                    fireRightCannon();\n                break;\n            case DECKS.TORPEDO:\n                if (code === \"SPACE\")\n                    fireTorpedo();\n                break;\n            case DECKS.ENGINEERING:\n                switch (code) {\n                    case \"Z\":\n                        shipState.leftCannon.on = !shipState.leftCannon.on;\n                        triggerEvent(shipState.leftCannon.on ? \"deck_enabled\" : \"deck_disabled\");\n                        triggerEvent(\"update\", serialize());\n                        break;\n                    case \"X\":\n                        shipState.rightCannon.on = !shipState.rightCannon.on;\n                        triggerEvent(shipState.rightCannon.on ? \"deck_enabled\" : \"deck_disabled\");\n                        triggerEvent(\"update\", serialize());\n                        break;\n                    case \"C\":\n                        shipState.lights.on = !shipState.lights.on;\n                        triggerEvent(shipState.lights.on ? \"deck_enabled\" : \"deck_disabled\");\n                        triggerEvent(\"update\", serialize());\n                        break;\n                    case \"V\":\n                        shipState.torpedos.on = !shipState.torpedos.on;\n                        triggerEvent(shipState.torpedos.on ? \"deck_enabled\" : \"deck_disabled\");\n                        triggerEvent(\"update\", serialize());\n                        break;\n                }\n                redistributePower();\n                break;\n        }\n    }\n    function playerChangeDirection(id, direction) {\n        players[id].dx = direction.dx;\n        players[id].dy = direction.dy;\n    }\n    function playerDeckChange(id, deck) {\n        if (!Object.values(players).some((p) => p.deck === deck)) {\n            players[id].deck = deck;\n            triggerEvent(\"update\", serialize());\n            return true;\n        }\n        return false;\n    }\n    function removePlayer(id) {\n        var _a;\n        if ((_a = players[id]) === null || _a === void 0 ? void 0 : _a.isAdmin) {\n            Object.keys(players).forEach((id, i) => {\n                if (i === 0)\n                    players[id].isAdmin = true;\n            });\n        }\n        players = Object.keys(players).reduce((result, key) => {\n            if (key !== id)\n                result[key] = players[key];\n            return result;\n        }, {});\n    }\n    let leftCannonCooldown = false;\n    function fireLeftCannon() {\n        if (shipState.leftCannon.on && !leftCannonCooldown) {\n            leftCannonCooldown = true;\n            const interval = setTimeout(() => {\n                leftCannonCooldown = false;\n                clearInterval(interval);\n            }, 300);\n            const angle = shipState.leftCannon.angle;\n            const projectile = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(ship.position.x - 105, ship.position.y - 15, 5, {\n                isSensor: true,\n                collisionFilter: {\n                    category: CollisionCategories.PROJECTILE,\n                },\n                plugin: {\n                    isProjectile: true,\n                },\n            });\n            const projectile2 = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(ship.position.x - 95, ship.position.y + 12, 5, {\n                isSensor: true,\n                collisionFilter: {\n                    category: CollisionCategories.PROJECTILE,\n                },\n                plugin: {\n                    isProjectile: true,\n                },\n            });\n            const effect = {\n                id: effectCount++,\n                type: \"LEFTCANNON\",\n                body: projectile,\n                mounted: true,\n                angle,\n            };\n            const effect2 = {\n                id: effectCount++,\n                type: \"LEFTCANNONB\",\n                body: projectile2,\n                mounted: true,\n                angle,\n            };\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, projectile);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, projectile2);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setVelocity(projectile, new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](-20, 0).rotate(((angle + 40) * Math.PI) / 180));\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setVelocity(projectile2, new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](-15, 0).rotate(((angle - 55) * Math.PI) / 180));\n            setTimeout(() => {\n                effect.mounted = false;\n                effect2.mounted = false;\n                effects = effects.filter((ef) => ef !== effect && ef !== effect2);\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, projectile);\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, projectile2);\n            }, 1500);\n            effects.push(effect);\n            effects.push(effect2);\n        }\n    }\n    let rightCannonCooldown = false;\n    function fireRightCannon() {\n        if (shipState.rightCannon.on && !rightCannonCooldown) {\n            rightCannonCooldown = true;\n            const interval = setTimeout(() => {\n                rightCannonCooldown = false;\n                clearInterval(interval);\n            }, 500);\n            const angle = shipState.rightCannon.angle;\n            const projectile = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(ship.position.x + 170, ship.position.y - 17, 5, {\n                isSensor: true,\n                collisionFilter: {\n                    category: CollisionCategories.PROJECTILE,\n                },\n                plugin: {\n                    isProjectile: true,\n                },\n            });\n            const projectile2 = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(ship.position.x + 170, ship.position.y - 2, 5, {\n                isSensor: true,\n                collisionFilter: {\n                    category: CollisionCategories.PROJECTILE,\n                },\n                plugin: {\n                    isProjectile: true,\n                },\n            });\n            const effect = {\n                id: effectCount++,\n                type: \"RIGHTCANNON\",\n                body: projectile,\n                mounted: true,\n                angle,\n            };\n            const effect2 = {\n                id: effectCount++,\n                type: \"RIGHTCANNONB\",\n                body: projectile2,\n                mounted: true,\n                angle,\n            };\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, projectile);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, projectile2);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setVelocity(projectile, new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](10, 0).rotate(((angle - 16) * Math.PI) / 180));\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setVelocity(projectile2, new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](10, 0).rotate(((angle + 18) * Math.PI) / 180));\n            setTimeout(() => {\n                effect.mounted = false;\n                effect2.mounted = false;\n                effects = effects.filter((ef) => ef !== effect && ef !== effect2);\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, projectile);\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, projectile2);\n            }, 3000);\n            effects.push(effect);\n            effects.push(effect2);\n        }\n    }\n    let torpedoTargetGrowInterval;\n    let torpedoTriggerCooldown;\n    let torpedoCooldownStartedAt = 0;\n    let torpedoCooldown;\n    let targetEffect = null;\n    let torpedoSensor = null;\n    let torpedoTargetting = false;\n    function fireTorpedo() {\n        if (torpedoTriggerCooldown ||\n            torpedoCooldown ||\n            !shipState.torpedos.on ||\n            shipState.torpedos.amount <= 0)\n            return null;\n        torpedoTriggerCooldown = setTimeout(() => {\n            clearInterval(torpedoTriggerCooldown);\n            torpedoTriggerCooldown = undefined;\n        }, 500);\n        if (!torpedoTargetting) {\n            torpedoTargetting = true;\n            shipState.torpedos.targetting = true;\n            torpedoSensor = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(ship.position.x, ship.position.y, 10, {});\n            targetEffect = {\n                id: effectCount++,\n                body: torpedoSensor,\n                type: \"TORPEDOTARGET\",\n                mounted: true,\n                angle: 0,\n            };\n            torpedoTargetGrowInterval = setInterval(() => {\n                torpedoSensor.circleRadius += 2;\n                torpedoSensor.position = ship.position;\n                if (torpedoSensor.circleRadius >= 500) {\n                    clearInterval(torpedoTargetGrowInterval);\n                    torpedoTargetting = false;\n                    effects = effects.filter((ef) => ef !== targetEffect && ef !== targetEffect);\n                    torpedoSensor.circleRadius = 10;\n                }\n            }, 10);\n            effects.push(targetEffect);\n        }\n        else {\n            clearInterval(torpedoTargetGrowInterval);\n            shipState.torpedos.targetting = false;\n            torpedoCooldownStartedAt = timeElapsed();\n            torpedoTargetting = false;\n            fishes.forEach((fish) => {\n                if (fish.isTargetted(torpedoSensor.position, torpedoSensor.circleRadius - 50, torpedoSensor.circleRadius + 50) &&\n                    shipState.torpedos.amount > 0) {\n                    shipState.torpedos.amount--;\n                    const torpedoId = effectCount++;\n                    const torpedo = matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Bodies\"].circle(ship.position.x + 95, ship.position.y + 60, 10, {\n                        isSensor: true,\n                        plugin: {\n                            isTorpedo: true,\n                            fishId: fish.id,\n                            afterCollision: () => {\n                                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, torpedo);\n                                effects = effects.filter((e) => e.id !== torpedoId);\n                            },\n                        },\n                    });\n                    const torpedoEffect = {\n                        id: torpedoId,\n                        body: torpedo,\n                        type: \"TORPEDO\",\n                        mounted: true,\n                        angle: 0,\n                        getAngle: () => {\n                            return ((_math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"].fromMatter(fish.body.position)\n                                .substract(_math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"].fromMatter(torpedo.position))\n                                .angle() *\n                                180) /\n                                Math.PI +\n                                -45 +\n                                180);\n                        },\n                        updater: () => {\n                            if (fish.body &&\n                                fishes.find((f) => f.mounted && f.id === fish.body.plugin.id)) {\n                                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setVelocity(torpedo, _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"].fromMatter(fish.body.position)\n                                    .substract(_math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"].fromMatter(torpedo.position))\n                                    .normalize()\n                                    .multiply(5));\n                            }\n                            else {\n                                torpedo.plugin.afterCollision();\n                            }\n                        },\n                    };\n                    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, torpedo);\n                    effects.push(torpedoEffect);\n                }\n            });\n            effects = effects.filter((ef) => ef !== targetEffect && ef !== targetEffect);\n            torpedoCooldown = setTimeout(() => {\n                clearTimeout(torpedoCooldown);\n                torpedoCooldownStartedAt = 0;\n                torpedoCooldown = undefined;\n            }, 3000);\n        }\n    }\n    function updateShip() {\n        let changed = false;\n        Object.values(players).forEach((player) => {\n            if (player.dx || player.dy) {\n                if (player.deck === DECKS.NAVIGATION) {\n                    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].applyForce(ship, ship.position, new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](player.dx, player.dy).normalize().multiply(0.03) //.multiply(0.03)\n                    );\n                    changed = true;\n                }\n                else if (player.deck === DECKS.LIGHTS) {\n                    shipState.lights.angle += player.dx / 50;\n                    shipState.lights.length -= player.dy * 5;\n                    if (shipState.lights.length < 50)\n                        shipState.lights.length = 50;\n                    else if (shipState.lights.length > 150)\n                        shipState.lights.length = 150;\n                    changed = true;\n                }\n                else if (player.deck === DECKS.CANNONLEFT) {\n                    shipState.leftCannon.angle += player.dx;\n                    if (shipState.leftCannon.angle < -14)\n                        shipState.leftCannon.angle = -14;\n                    if (shipState.leftCannon.angle > 30)\n                        shipState.leftCannon.angle = 30;\n                    changed = true;\n                }\n                else if (player.deck === DECKS.CANNONRIGHT) {\n                    shipState.rightCannon.angle += player.dx;\n                    if (shipState.rightCannon.angle < -20)\n                        shipState.rightCannon.angle = -20;\n                    if (shipState.rightCannon.angle > 20)\n                        shipState.rightCannon.angle = 20;\n                    changed = true;\n                }\n            }\n        });\n        if (new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](ship.velocity.x, ship.velocity.y).module() < 0.03) {\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setVelocity(ship, new _math__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"](0, 0));\n        }\n        return changed;\n    }\n    function shouldUpdate() {\n        matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Engine\"].update(engine);\n        fishes.forEach((fish) => fish.updater());\n        effects.forEach((effect) => {\n            if (effect.updater)\n                effect.updater();\n        });\n        if (torpedoCooldown) {\n            const newCooldown = 3 - timeElapsed() + torpedoCooldownStartedAt;\n            shipState.torpedos.cooldown = newCooldown < 0 ? 0 : newCooldown;\n        }\n        else {\n            shipState.torpedos.cooldown = 0;\n        }\n        if (shipState.health <= 0) {\n            return false;\n        }\n        checkObjetivesCompleted();\n        return updateShip() || world.bodies.some((x) => x.speed > 0);\n    }\n    function timeElapsed() {\n        if (startTime)\n            return (Math.trunc((new Date().getTime() - startTime.getTime()) / 100) / 10);\n        return 0;\n    }\n    function checkObjetivesCompleted() {\n        if (objectives.every((o) => o.done)) {\n            if (level === 2) {\n                stop();\n                triggerEvent(\"game_end\", serialize());\n            }\n            else {\n                level += 1;\n                changeLevel();\n            }\n        }\n    }\n    function changeLevel() {\n        shipState.torpedos.amount = 3;\n        if (level === 1) {\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, levelWalls[0]);\n        }\n        else if (level === 2) {\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, levelWalls[1]);\n        }\n        const newFishes = [];\n        while (newFishes.length < 6 ||\n            newFishes.map((f) => f.type).filter((x, i, arr) => arr.indexOf(x) === i)\n                .length < 3) {\n            const fish = getRandomFish(level);\n            fish.id = fishCount++;\n            fish.body.plugin.id = fish.id;\n            if (fish.type)\n                newFishes.push(fish);\n        }\n        while (newFishes.length < 15) {\n            const fish = getRandomBadGuy(level);\n            fish.id = fishCount++;\n            fish.body.plugin.id = fish.id;\n            if (fish.type)\n                newFishes.push(fish);\n        }\n        newFishes.forEach((fish) => {\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, fish.body);\n            fish.mounted = true;\n            fishes.push(fish);\n            fishes[fishes.length - 1].body.plugin.index = fishes.length - 1;\n        });\n        rewards = [...rewards, ...objectives];\n        objectives = getRandomObjectives(newFishes);\n    }\n    function handleCollisionPair(bodyA, bodyB) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (((_a = bodyA.plugin) === null || _a === void 0 ? void 0 : _a.isMonster) && !((_b = bodyB.plugin) === null || _b === void 0 ? void 0 : _b.isTorpedo)) {\n            fishes[bodyA.plugin.index].invertDirection();\n        }\n        if (((_c = bodyA.plugin) === null || _c === void 0 ? void 0 : _c.isMonster) && ((_d = bodyB.plugin) === null || _d === void 0 ? void 0 : _d.isTorpedo)) {\n            if (bodyB.plugin.fishId === bodyA.plugin.id) {\n                const index = objectives.findIndex((obj) => obj.type === bodyA.plugin.type);\n                if (index !== -1) {\n                    objectives[index].done = true;\n                    objectives[index].amount++;\n                }\n                bodyB.plugin.afterCollision();\n                fishes[bodyA.plugin.index].killed = true;\n                setTimeout(() => {\n                    if (fishes[bodyA.plugin.index]) {\n                        fishes[bodyA.plugin.index].mounted = false;\n                    }\n                    matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, bodyA);\n                }, 1000);\n            }\n        }\n        if (((_e = bodyA.plugin) === null || _e === void 0 ? void 0 : _e.isMonster) && ((_f = bodyB.plugin) === null || _f === void 0 ? void 0 : _f.isShip) && ((_g = bodyA.plugin) === null || _g === void 0 ? void 0 : _g.canDoDamage)) {\n            bodyA.plugin.canDoDamage = false;\n            const timeout = setTimeout(() => {\n                bodyA.plugin.canDoDamage = true;\n                clearTimeout(timeout);\n            }, 2000);\n            if (!(shipState.health <= 0)) {\n                shipState.health -= 5;\n            }\n            if (shipState.health <= 0) {\n                triggerEvent(\"game_end\", serialize());\n            }\n        }\n        else if (((_h = bodyA.plugin) === null || _h === void 0 ? void 0 : _h.isMonster) && ((_j = bodyB.plugin) === null || _j === void 0 ? void 0 : _j.isProjectile)) {\n            const index = objectives.findIndex((obj) => obj.type === bodyA.plugin.type);\n            if (index !== -1) {\n                objectives[index].done = true;\n                objectives[index].amount++;\n            }\n            fishes[bodyA.plugin.index].killed = true;\n            setTimeout(() => {\n                if (fishes[bodyA.plugin.index]) {\n                    fishes[bodyA.plugin.index].mounted = false;\n                }\n                matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, bodyA);\n            }, 1000);\n        }\n    }\n    function handleCollisionEndPair(bodyA, bodyB) {\n        return;\n    }\n    function handleCollision(e) {\n        const { pairs } = e;\n        for (let i = 0, j = pairs.length; i != j; ++i) {\n            const pair = pairs[i];\n            handleCollisionPair(pair.bodyA, pair.bodyB);\n            handleCollisionPair(pair.bodyB, pair.bodyA);\n        }\n    }\n    function handleCollisionEnd(e) {\n        const { pairs } = e;\n        for (let i = 0, j = pairs.length; i != j; ++i) {\n            const pair = pairs[i];\n            handleCollisionEndPair(pair.bodyA, pair.bodyB);\n            handleCollisionEndPair(pair.bodyB, pair.bodyA);\n        }\n    }\n    function init() {\n        if (!startTime) {\n            console.log(\"init\");\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, ship);\n            walls.forEach((wall) => matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, wall));\n            levelWalls.forEach((wall) => matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].add(world, wall));\n            shipState.health = 100;\n            fishes = [];\n            effects = [];\n            rewards = [];\n            level = 0;\n            changeLevel();\n            startTime = new Date();\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].on(engine, \"collisionStart\", handleCollision);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].on(engine, \"collisionEnd\", handleCollisionEnd);\n            interval = setInterval(() => {\n                if (shouldUpdate() || seconds !== timeElapsed()) {\n                    seconds = timeElapsed();\n                    triggerEvent(\"update\", serialize());\n                }\n            }, timeConstant);\n        }\n    }\n    function stop() {\n        if (startTime) {\n            console.log(\"stop\");\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].clear(world, false);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, ship);\n            walls.forEach((wall) => matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, wall));\n            levelWalls.forEach((wall) => matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, wall));\n            objectives = [];\n            fishes = [];\n            effects = [];\n            startTime = null;\n            clearInterval(interval);\n        }\n    }\n    function reset() {\n        if (startTime) {\n            console.log(\"reset\");\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].clear(world, false);\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, ship);\n            walls.forEach((wall) => matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, wall));\n            levelWalls.forEach((wall) => matter_js__WEBPACK_IMPORTED_MODULE_0__[\"World\"].remove(world, wall));\n            shipState.health = 100;\n            matter_js__WEBPACK_IMPORTED_MODULE_0__[\"Body\"].setPosition(ship, startPosition);\n            rewards = [];\n            objectives = [];\n            fishes = [];\n            effects = [];\n            startTime = null;\n            clearInterval(interval);\n        }\n    }\n    function serialize() {\n        return {\n            seconds,\n            ship: {\n                x: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(ship.position.x),\n                y: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(ship.position.y),\n                radius: ship.circleRadius,\n                state: shipState,\n            },\n            objectives,\n            players,\n            rewards,\n            effects: effects\n                .filter((e) => e.mounted)\n                .map((e) => ({\n                id: e.id,\n                type: e.type,\n                x: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(e.body.position.x),\n                y: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(e.body.position.y),\n                radius: e.body.circleRadius,\n                angle: e.getAngle ? Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(e.getAngle()) : Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(e.angle),\n            })),\n            fishes: fishes\n                .filter((f) => f.mounted)\n                .map((fish) => ({\n                id: fish.id,\n                x: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(fish.body.position.x),\n                y: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"round\"])(fish.body.position.y),\n                radius: fish.body.circleRadius,\n                type: fish.type,\n                killed: fish.killed,\n                targetted: torpedoTargetting &&\n                    torpedoSensor &&\n                    fish.isTargetted(torpedoSensor.position, torpedoSensor.circleRadius - 50, torpedoSensor.circleRadius + 50),\n            })),\n        };\n    }\n    return {\n        init,\n        reset,\n        getPlayers,\n        addPlayer,\n        getPlayer,\n        removePlayer,\n        serialize,\n        subscribeEvent,\n        triggerEvent,\n        playerKeyDown,\n        playerChangeDirection,\n        playerDeckChange,\n    };\n}\n\n\n//# sourceURL=webpack:///./src/room/game.ts?");

/***/ }),

/***/ "./src/room/room.ts":
/*!**************************!*\
  !*** ./src/room/room.ts ***!
  \**************************/
/*! exports provided: Room */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Room\", function() { return Room; });\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/room/game.ts\");\n\nfunction Room(id, name, mainSocket) {\n    const game = Object(_game__WEBPACK_IMPORTED_MODULE_0__[\"Game\"])();\n    const eventSubscribers = {};\n    function subscribeEvent(eventName, callback) {\n        if (!eventSubscribers[eventName]) {\n            eventSubscribers[eventName] = [callback];\n        }\n        else {\n            eventSubscribers[eventName].push(callback);\n        }\n    }\n    function triggerEvent(eventName, ...args) {\n        if (eventSubscribers[eventName]) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            eventSubscribers[eventName].forEach((cb) => cb(...args));\n        }\n    }\n    mainSocket.on(\"connect\", (socket) => {\n        console.log(`player ${socket.id} connected`);\n        if (Object.values(game.getPlayers()).length > 5) {\n            socket.disconnect(true);\n            return;\n        }\n        const { name } = socket.handshake.query;\n        game.addPlayer(socket.id, name);\n        socket.emit(\"login_success\", {\n            self: game.getPlayer(socket.id),\n            players: game.getPlayers(),\n        });\n        socket.broadcast.emit(\"player_join\", game.getPlayer(socket.id));\n        socket.on(\"request_direction_change\", (payload) => {\n            console.log(\"request_direction_change\", payload);\n            game.playerChangeDirection(socket.id, payload);\n        });\n        socket.on(\"start_game\", () => {\n            console.log(\"game_started\");\n            mainSocket.emit(\"game_started\");\n            game.init();\n        });\n        socket.on(\"request_kick_player\", (payload) => {\n            console.log(\"request_kick_player\", payload.id);\n            socket.to(payload.id).emit(\"player_kicked\");\n            game.removePlayer(payload.id);\n        });\n        socket.on(\"request_key_press\", (payload) => {\n            console.log(\"request_key_press\", payload.code);\n            game.playerKeyDown(socket.id, payload.code);\n        });\n        socket.on(\"request_deck_change\", (payload) => {\n            console.log(\"deck_change\", payload.deck);\n            if (game.playerDeckChange(socket.id, payload.deck)) {\n                socket.emit(\"deck_changed\", { id: socket.id, deck: payload.deck });\n            }\n        });\n        socket.on(\"disconnect\", () => {\n            console.log(`player ${socket.id} disconnected`);\n            socket.broadcast.emit(\"player_leave\", { id: socket.id });\n            game.removePlayer(socket.id);\n            if (Object.values(game.getPlayers()).length === 0) {\n                triggerEvent(\"room_empty\");\n            }\n        });\n    });\n    game.subscribeEvent(\"update\", (payload) => {\n        mainSocket.emit(\"update\", payload);\n    });\n    game.subscribeEvent(\"game_end\", (payload) => {\n        mainSocket.emit(\"game_end\", payload);\n    });\n    game.subscribeEvent(\"deck_disabled\", () => {\n        mainSocket.emit(\"deck_disabled\");\n    });\n    game.subscribeEvent(\"deck_enabled\", () => {\n        mainSocket.emit(\"deck_enabled\");\n    });\n    return {\n        id,\n        name,\n        socket: mainSocket,\n        subscribeEvent,\n        triggerEvent,\n        reset: () => {\n            game.reset();\n        },\n    };\n}\n\n\n//# sourceURL=webpack:///./src/room/room.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/*! exports provided: round, distance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\nconst roundingDecimals = 3;\nconst round = (n) => Math.round(n * roundingDecimals) / roundingDecimals;\nconst distance = (a, b) => {\n    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n};\n\n\n//# sourceURL=webpack:///./src/utils.ts?");

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"body-parser\");\n\n//# sourceURL=webpack:///external_%22body-parser%22?");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"express\");\n\n//# sourceURL=webpack:///external_%22express%22?");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"http\");\n\n//# sourceURL=webpack:///external_%22http%22?");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");\n\n//# sourceURL=webpack:///external_%22https%22?");

/***/ }),

/***/ "matter-js":
/*!****************************!*\
  !*** external "matter-js" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"matter-js\");\n\n//# sourceURL=webpack:///external_%22matter-js%22?");

/***/ }),

/***/ "socket.io":
/*!****************************!*\
  !*** external "socket.io" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"socket.io\");\n\n//# sourceURL=webpack:///external_%22socket.io%22?");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"uuid\");\n\n//# sourceURL=webpack:///external_%22uuid%22?");

/***/ })

/******/ });